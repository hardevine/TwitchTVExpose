// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['apps/header/list/templates', 'views/_base'], function(Templates, AppView) {
    var Header, ListHeaders, Loginview, _itemview, _ref, _ref1, _ref2, _ref3;
    _itemview = (function(_super) {
      __extends(_itemview, _super);

      function _itemview() {
        _ref = _itemview.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      _itemview.prototype.template = _.template(Templates.item);

      _itemview.prototype.tagName = "li";

      return _itemview;

    })(AppView.ItemView);
    return {
      LoginView: Loginview = (function(_super) {
        __extends(Loginview, _super);

        function Loginview() {
          _ref1 = Loginview.__super__.constructor.apply(this, arguments);
          return _ref1;
        }

        Loginview.prototype.template = _.template(Templates.login);

        Loginview.prototype.el = "#login";

        return Loginview;

      })(AppView.ItemView),
      HeaderView: ListHeaders = (function(_super) {
        __extends(ListHeaders, _super);

        function ListHeaders() {
          _ref2 = ListHeaders.__super__.constructor.apply(this, arguments);
          return _ref2;
        }

        ListHeaders.prototype.template = _.template(Templates.header);

        ListHeaders.prototype.itemView = _itemview;

        ListHeaders.prototype.itemViewContainer = "ul";

        return ListHeaders;

      })(AppView.CompositeView),
      Layout: Header = (function(_super) {
        __extends(Header, _super);

        function Header() {
          _ref3 = Header.__super__.constructor.apply(this, arguments);
          return _ref3;
        }

        Header.prototype.template = _.template(Templates.layout);

        Header.prototype.regions = {
          listRegion: "#list-region"
        };

        return Header;

      })(AppView.Layout)
    };
  });

}).call(this);
