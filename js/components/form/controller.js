// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["msgbus", "backbone", "controller/_base", "components/form/views", "backbone.syphon"], function(msgBus, Backbone, AppController, FormWrapper) {
    var FormController, _ref;
    FormController = (function(_super) {
      __extends(FormController, _super);

      function FormController() {
        _ref = FormController.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      FormController.prototype.initialize = function(options) {
        if (options == null) {
          options = {};
        }
        this.contentView = options.view;
        this.formLayout = this.getFormLayout(options.config);
        this.listenTo(this.formLayout, "show", this.formContentRegion);
        this.listenTo(this.formLayout, "form:submit", this.formSubmit);
        return this.listenTo(this.formLayout, "form:cancel", this.formCancel);
      };

      FormController.prototype.formCancel = function() {
        return this.contentView.triggerMethod("form:cancel");
      };

      FormController.prototype.formSubmit = function() {
        var collection, data, model;
        data = Backbone.Syphon.serialize(this.formLayout);
        if (this.contentView.triggerMethod("form:submit", data) !== false) {
          model = this.contentView.model;
          collection = this.contentView.collection;
          return this.processFormSubmit(data, model, collection);
        }
      };

      FormController.prototype.processFormSubmit = function(data, model, collection) {
        return model.save(data, {
          collection: collection
        });
      };

      FormController.prototype.onClose = function() {};

      FormController.prototype.formContentRegion = function() {
        this.region = this.formLayout.formContentRegion;
        return this.show(this.contentView);
      };

      FormController.prototype.getFormLayout = function(options) {
        var buttons, config;
        if (options == null) {
          options = {};
        }
        config = this.getDefaultConfig(_.result(this.contentView, "form"));
        _.extend(config, options);
        buttons = this.getButtons(config.buttons);
        return new FormWrapper({
          config: config,
          model: this.contentView.model,
          buttons: buttons
        });
      };

      FormController.prototype.getDefaultConfig = function(config) {
        if (config == null) {
          config = {};
        }
        return _.defaults(config, {
          footer: true,
          focusFirstInput: true,
          errors: true,
          syncing: true
        });
      };

      FormController.prototype.getButtons = function(buttons) {
        if (buttons == null) {
          buttons = {};
        }
        if (buttons !== false) {
          return msgBus.reqres.request("form:button:entities", buttons, this.contentView.model);
        }
      };

      return FormController;

    })(AppController);
    return msgBus.reqres.setHandler("form:wrapper", function(contentView, options) {
      var formController;
      if (options == null) {
        options = {};
      }
      if (!contentView.model) {
        throw new Error("No model found inside of form's contentView");
      }
      formController = new FormController({
        view: contentView,
        config: options
      });
      return formController.formLayout;
    });
  });

}).call(this);
