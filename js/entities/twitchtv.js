// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["entities/_backbone", "msgbus"], function(_Backbone, msgBus) {
    var API, Game, GamesCollection, SearchCollection, Stream, StreamCollection, games, _ref, _ref1, _ref2, _ref3, _ref4;
    Game = (function(_super) {
      __extends(Game, _super);

      function Game() {
        _ref = Game.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      return Game;

    })(_Backbone.Model);
    Stream = (function(_super) {
      __extends(Stream, _super);

      function Stream() {
        _ref1 = Stream.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      return Stream;

    })(_Backbone.Model);
    SearchCollection = (function(_super) {
      __extends(SearchCollection, _super);

      function SearchCollection() {
        _ref2 = SearchCollection.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      SearchCollection.prototype.model = Game;

      SearchCollection.prototype.parse = function(response) {
        return response.games;
      };

      return SearchCollection;

    })(_Backbone.Collection);
    GamesCollection = (function(_super) {
      __extends(GamesCollection, _super);

      function GamesCollection() {
        _ref3 = GamesCollection.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      GamesCollection.prototype.model = Game;

      GamesCollection.prototype.initialize = function() {
        var _this = this;
        msgBus.reqres.setHandler("games:fetchmore", function() {
          return _this.moreGames();
        });
        this.limit = 50;
        this.offset = 0;
        this.loading = false;
        this.previousSearch = null;
        return this._total = null;
      };

      GamesCollection.prototype.moreGames = function() {
        var loaded,
          _this = this;
        if (this.loading || this.length >= this._total) {
          return true;
        }
        this.loading = true;
        this.offset++;
        loaded = this.fetch({
          remove: false,
          data: {
            oauth_token: msgBus.reqres.request("get:current:token"),
            limit: this.limit,
            offset: this.offset * this.limit
          }
        });
        return $.when(loaded).then(function() {
          _this.loading = false;
          return console.log("Loaded page", _this.offset + 1, "Games fetched so far", _this.length, "Total games available to fetch ", _this._total);
        });
      };

      GamesCollection.prototype.searchName = function(_name) {
        return this.find(function(model) {
          return model.get("game").name === _name;
        });
      };

      GamesCollection.prototype.parse = function(response) {
        this._total = response._total;
        return response.top;
      };

      return GamesCollection;

    })(_Backbone.Collection);
    StreamCollection = (function(_super) {
      __extends(StreamCollection, _super);

      function StreamCollection() {
        _ref4 = StreamCollection.__super__.constructor.apply(this, arguments);
        return _ref4;
      }

      StreamCollection.prototype.model = Stream;

      StreamCollection.prototype.initialize = function() {
        var _this = this;
        msgBus.reqres.setHandler("streams:fetchmore", function() {
          return _this.moreStreams();
        });
        this.limit = 12;
        this.offset = 0;
        this.loading = false;
        this.previousSearch = null;
        return this._total = null;
      };

      StreamCollection.prototype.moreStreams = function() {
        var loaded,
          _this = this;
        if (this.loading || this.length >= this._total) {
          return true;
        }
        this.loading = true;
        this.offset++;
        loaded = this.fetch({
          remove: false,
          data: {
            oauth_token: msgBus.reqres.request("get:current:token"),
            q: this.game,
            limit: this.limit,
            offset: this.offset * this.limit
          }
        });
        return $.when(loaded).then(function() {
          return _this.loading = false;
        });
      };

      StreamCollection.prototype.parse = function(resp) {
        this._total = resp._total;
        return resp.streams;
      };

      return StreamCollection;

    })(_Backbone.Collection);
    games = new GamesCollection;
    games.timeStamp = new Date();
    API = {
      getGames: function(url, params) {
        var elapsedSeconds;
        if (params == null) {
          params = {};
        }
        elapsedSeconds = Math.round(((new Date() - games.timeStamp) / 1000) % 60);
        if (elapsedSeconds > 45 || games.length === 0) {
          _.defaults(params, {
            oauth_token: msgBus.reqres.request("get:current:token")
          });
          games = new GamesCollection;
          games.timeStamp = new Date();
          games.url = "https://api.twitch.tv/kraken/" + url + "?callback=?";
          games.fetch({
            reset: true,
            data: params
          });
        }
        return games;
      },
      searchGames: function(url, params) {
        var sgames;
        if (params == null) {
          params = {};
        }
        _.defaults(params, {
          oauth_token: msgBus.reqres.request("get:current:token")
        });
        sgames = new SearchCollection;
        sgames.url = "https://api.twitch.tv/kraken/" + url + "?callback=?";
        sgames.fetch({
          reset: true,
          data: params
        });
        return sgames;
      },
      getStreams: function(url, params) {
        var streams;
        if (params == null) {
          params = {};
        }
        _.defaults(params, {
          oauth_token: msgBus.reqres.request("get:current:token")
        });
        streams = new StreamCollection;
        streams.game = params.q;
        streams.url = "https://api.twitch.tv/kraken/" + url + "?callback=?";
        streams.fetch({
          reset: true,
          data: params
        });
        return streams;
      }
    };
    msgBus.reqres.setHandler("games:top:entities", function() {
      return API.getGames("games/top", {
        limit: 50,
        offset: 0
      });
    });
    msgBus.reqres.setHandler("game:search", function(query) {
      return API.searchGames("games/search", {
        q: encodeURIComponent(query),
        type: "suggest"
      });
    });
    msgBus.reqres.setHandler("games:searchName", function(query) {
      return games.searchName(query);
    });
    return msgBus.reqres.setHandler("search:stream:entities", function(game) {
      return API.getStreams("search/streams", {
        q: game,
        limit: 12,
        offset: 0
      });
    });
  });

}).call(this);
